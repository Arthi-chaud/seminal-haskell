-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Enhance Type Error Messages
@package seminal-haskell
@version 0.0.1

module Compiler.Module

-- | Apply (possibly modified) HsModule to ParsedModule, | To allow sending
--   it to the typechecker
applyAST :: HsModule -> ParsedModule -> ParsedModule

module Compiler.Runner

-- | Allows runnning function exposed by the compiler's API
runCompiler :: Ghc a -> IO a


-- | Provides utilities to parse a file/source code using the compiler's
--   API
module Compiler.Parser

-- | Parse a file, retrieve its module
parseFile :: FilePath -> IO ParsingResult

-- | Result of Parsing process
type ParsingResult = Either ParsingErrorType ParsedModule
data ParsingErrorType

-- | Permission to read the file denied
PermissionDenied :: ParsingErrorType

-- | The file was not found
FileNotFound :: ParsingErrorType

-- | There was an error syntax in the source code
SyntaxError :: ParsingErrorType

-- | An unknown error occured | Comes with an error messag
UnknownError :: String -> ParsingErrorType
instance GHC.Classes.Eq Compiler.Parser.ParsingErrorType
instance GHC.Show.Show Compiler.Parser.ParsingErrorType


-- | Provide a way to access Compiler/Typechecker as a black box, |
--   according to Seminal's algorithm
module Compiler.TypeChecker

-- | Defines the possible outcomes of the typechecking process of the
--   compiler
data TypeCheckStatus

-- | Indicated the Code typechecks
Success :: TypeCheckStatus

-- | An error happened while typechecking
Error :: ErrorType -> TypeCheckStatus
data ErrorType

-- | Indicates an error occured while typechecking
TypeCheckError :: ErrorType

-- | A type or variable could not be resolved | It comes with the
--   compiler's error message
ScopeError :: String -> ErrorType

-- | Typecheck Module
typecheckModule :: ParsedModule -> Ghc TypeCheckStatus
instance GHC.Classes.Eq Compiler.TypeChecker.TypeCheckStatus
instance GHC.Show.Show Compiler.TypeChecker.TypeCheckStatus
instance GHC.Classes.Eq Compiler.TypeChecker.ErrorType
instance GHC.Show.Show Compiler.TypeChecker.ErrorType

module Enumerator.Changes

-- | Defines a change to apply on the AST
data Change node
Change :: SrcSpan -> node -> [Change node] -> Change node

-- | Location (in the source code) of the node to change.
[location] :: Change node -> SrcSpan

-- | Run the change, returns the new node
[exec] :: Change node -> node

-- | List of subsequent changes to consider, if the parent change succeeds
[followups] :: Change node -> [Change node]

-- | Wraps a change of a leaf for/into its parent
wrapChange :: (leaf -> node) -> Change leaf -> Change node

-- | Rewraps tha location to the change type
wrapLoc :: (SrcSpan -> a -> l) -> Change a -> Change l
instance GHC.Utils.Outputable.Outputable node => GHC.Show.Show (Enumerator.Changes.Change node)


-- | From a node in the AST, provide possible changes to apply
module Enumerator.Enumerator
enumerateChangesInDeclaration :: Enumerator (HsDecl GhcPs)
enumerateChangesAtRoot :: [LHsDecl GhcPs] -> [Change [LHsDecl GhcPs]]


-- | The Ranker allows sorting valid changes, before presenting them to the
--   user
module Ranker


-- | Goes through the AST to find nodes to give to the enumerator
module Searcher


-- | Entrypoint to Seminal
module Seminal

-- | Run Seminal on a source file. If it returns Nothing, the file
--   typechecks, otherwise, provides an ordered list of change suggestions
runSeminal :: FilePath -> IO Status
data Status

-- | When the file typechecks without any changes
Success :: Status

-- | When an error occurs while parsing the file, unrelated to typechecking
InvalidFile :: String -> Status

-- | An ordered list of change suggestions
Changes :: [Change HsModule] -> Status
