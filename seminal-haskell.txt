-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Enhance Type Error Messages
@package seminal-haskell
@version 0.0.1

module Seminal.Change

-- | Defines a change to apply on the AST. The namings are inspired by the
--   <tt>astRepl</tt> (Seminal, 2006, p. 5)
data Change node
Change :: ChangeNode node -> [ChangeNode node] -> ChangeLocation -> [Change node] -> String -> ChangeType -> Change node
[src] :: Change node -> ChangeNode node

-- | Run the change, returns the new node
[exec] :: Change node -> [ChangeNode node]
[location] :: Change node -> ChangeLocation

-- | List of subsequent changes to consider, if the <tt>change</tt>
--   typechecks
[followups] :: Change node -> [Change node]

-- | A User-friendly message to explain why the change worked
[message] :: Change node -> String

-- | Allows ranking the changes.
[category] :: Change node -> ChangeType

-- | Builds <a>ChangeNode</a> from an AST node
node :: Outputable n => n -> ChangeNode n
getNode :: ChangeNode n -> n

-- | Sub-data, that could be either the original node, or the change
data ChangeNode nodeType
(<$$>) :: (a -> b) -> [Change a] -> [Change b]
(<&&>) :: [Change a] -> (a -> b) -> [Change b]
show :: ChangeNode node -> ChangeNode node -> ChangeLocation -> String -> String

-- | Categories of changes, that allow ordering them
data ChangeType

-- | The Change basically replaces the node with a wildcard. It is not a
--   conclusive change
Wildcard :: ChangeType

-- | A Change that consist in removing a value
Removal :: ChangeType

-- | A Change that consist of wrapping the actual value E.g. <a>show</a>
Wrapping :: ChangeType

-- | The Change is good enough to terminate the search and/or be presented
--   to the user as if
Terminal :: ChangeType
changeTypes :: [String]
instance Data.Data.Data Seminal.Change.ChangeType
instance GHC.Read.Read Seminal.Change.ChangeType
instance GHC.Show.Show Seminal.Change.ChangeType
instance GHC.Classes.Eq Seminal.Change.ChangeType
instance GHC.Base.Functor Seminal.Change.Change
instance GHC.Classes.Ord Seminal.Change.ChangeType
instance GHC.Base.Functor Seminal.Change.ChangeNode

module Seminal.Compiler.Runner

-- | Setup and run a GHC Session. The file paths are the paths to the
--   source files to load. The action to run takes the list of loaded
--   modules. Upon error (file access, syntax, ...), throws
runCompiler :: forall a. [FilePath] -> ([(FilePath, ParsedModule)] -> Ghc a) -> IO (Either ErrorMessage a)


-- | Provide a way to access Compiler/Typechecker as a black box, |
--   according to Seminal's algorithm
module Seminal.Compiler.TypeChecker

-- | Defines the possible outcomes of the typechecking process of the
--   compiler
data TypeCheckStatus

-- | Indicated the Code typechecks
Success :: TypeCheckStatus

-- | An error happened while typechecking
Error :: ErrorType -> TypeCheckStatus
data ErrorType

-- | Indicates an error occured while typechecking
TypeCheckError :: String -> ErrorType

-- | A type or variable could not be resolved | It comes with the
--   compiler's error message
ScopeError :: String -> ErrorType
isScopeError :: ErrorType -> Bool
isTypecheckError :: ErrorType -> Bool
getTypeCheckError :: TypeCheckStatus -> Maybe ErrorType

-- | Typecheck Module
typecheckModule :: ParsedModule -> Ghc TypeCheckStatus
instance GHC.Classes.Eq Seminal.Compiler.TypeChecker.TypeCheckStatus
instance GHC.Show.Show Seminal.Compiler.TypeChecker.TypeCheckStatus
instance GHC.Classes.Eq Seminal.Compiler.TypeChecker.ErrorType
instance GHC.Show.Show Seminal.Compiler.TypeChecker.ErrorType

module Seminal.Options
newtype Options
Options :: SearchMethod -> Options

-- | Tells when to stop searching
[search] :: Options -> SearchMethod
data SearchMethod

-- | Stop when the bottom of the AST is reached
Eager :: SearchMethod

-- | Stop when a <tt>Terminal</tt> change is found
Lazy :: SearchMethod
instance GHC.Classes.Eq Seminal.Options.SearchMethod


-- | Entrypoint to Seminal
module Seminal

-- | Run Seminal on a source file. If it returns Nothing, the file
--   typechecks, otherwise, provides an ordered list of change suggestions
runSeminal :: Options -> [FilePath] -> IO Status
data Status

-- | When the file typechecks without any changes
Success :: Status

-- | When an error occurs during the GHC session, unrelated to typechecking
Error :: ErrorMessage -> Status

-- | For each file that does not typecheck, an ordered list of change
--   suggestions, Along with the original typecheck error
Result :: (Int, [(FilePath, ErrorMessage, [Change HsModule])]) -> Status
